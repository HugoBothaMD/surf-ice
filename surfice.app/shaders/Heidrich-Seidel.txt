//pref
Ambient|float|0.0|0.4|1
Diffuse|float|0.0|0.8|1
Specular|float|0.0|0.55|1
Roughness|float|0.001|0.05|0.5
AnisoRoughness|float|0.001|0.5|1
Heidrich-Seidel anisotropic specularity.  specularity. Adapted from Fluxus Library, Copyright 2007 Dave Griffiths, GPLv2|note
//vert
uniform vec3 LightPos;
varying vec3 vN, vL, vV;
varying vec4 vP, vClr;
void main()
{
    vN = gl_NormalMatrix * gl_Normal;
    vL = (gl_LightSource[0].position).xyz;
    vV = -vec3(gl_ModelViewMatrix*gl_Vertex);
    vP = gl_Vertex;
    gl_Position = ftransform();
    //gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
    vClr = gl_Color;
}
//frag
// Copyright (C) 2007 Dave Griffiths - Fluxus Shader Library - Anisotropic Specular Reflection Shader
uniform float Ambient, Diffuse, Specular, Roughness, AnisoRoughness;
uniform vec4 ClipPlane;
varying vec3 vN, vL, vV;
varying vec4 vP, vClr;

vec3 desaturate(vec3 color, float amount) {
    vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));
    return vec3(mix(color, gray, amount));
}
void main()
{
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
		vec3 a = gl_FrontMaterial.ambient.rgb;
	a = mix(a.rgb, vClr.rgb, vClr.a);
	vec3 d = a * Diffuse;
	a *= Ambient;
	vec3 l = normalize(vL);
    vec3 n = normalize(vN);
    float diffuse = dot(l,n);
	if (n.z < 0.0) { //i.e. if (!gl_FrontFacing)
    	vec3 backsurface = desaturate(a * 0.75 +
                        d*abs(diffuse) * 0.75, 0.5);
    	gl_FragColor = vec4(backsurface,1.0);
    	return;
	}
	vec3 SpecDirection = vec3(0.0, 0.0, 1.0);
    vec3 v = normalize(vV);
    vec3 t = cross(n,normalize(SpecDirection));
    vec3 h = normalize(l+v);

    float specular = pow(dot(n,h),1.0/(Roughness*Roughness));
    // Heidrich-Seidel anisotropic distribution
    float ldott = dot(l,t);
    float vdott = dot(v,t);
    float aniso = pow(sin(ldott)*sin(vdott) +
                      cos(ldott)*cos(vdott),1.0/(AnisoRoughness*AnisoRoughness));
     aniso = sqrt(aniso);
     gl_FragColor = vec4(a +
                        d*diffuse +
                        aniso*specular*
                        Specular, 1.0);
}
// Copyright (C) 2007 Dave Griffiths
// Licence: GPLv2 (see COPYING)
// Fluxus Shader Library
// ---------------------
// Anisotropic Specular Reflection Shader
// This shader is useful for depicting surfaces
// such as velvet or brushed metal, as it allows
// you to stretch the highlight along the
// SpecDirection vector (in object space)
// http://www.pawfal.org/fluxus/
// https://github.com/danomatika/fluxus/blob/master/LICENCE