//pref
Diffuse|float|0.0|0.7|1.4
DiffuseRough|float|0.0|1|5
Edge|float|0.0|0.7|1.4
EdgePower|float|0.1|1.0|1.9
Minimal edge shader. Copyright 2015 Chris Rorden, BSD2clause.|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    vClr = Clr;
}
//frag
#version 330
in vec4 vClr, vP;
in vec3 vN, vL, vV;
out vec4 color;
uniform float Diffuse = 0.7;
uniform float DiffuseRough = 1.0;
uniform float Edge = 1.0;
uniform float EdgePower = 1.0;
uniform vec4 ClipPlane = vec4(2.0, 0.0, 0.0, 0.0);

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	vec3 n = normalize(vN);
	float lightNormDot = abs(dot(n,normalize(vV))); //with respect to viewer
	lightNormDot = pow(lightNormDot, EdgePower);
	vec3 l = normalize(vL);
	//float d = dot(n,l) * Diffuse;
	float d = max(pow(max(dot( l, n), 0.0), DiffuseRough), 0.0) * Diffuse;
	d = (lightNormDot*Edge) + d;
	color = vec4(d * vClr.rgb, 1.0);
}