//pref
Brighten|float|0.5|1.5|2.5
SurfaceColor|float|0.0|1.0|1.0
Edge|float|0|0.2|1.0
PenWidth|float|0.01|1|1
MatCap|set|1|1|1
Material Capture Shader http://www.alecjacobson.com/weblog/?p=4827l|note
//vert
varying vec3 vN, vV;
varying vec4 vP, vClr;

void main() {
    vN = normalize(gl_NormalMatrix * gl_Normal);
    vV = -vec3(gl_ModelViewMatrix*gl_Vertex);
    vP = gl_Vertex;
    gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
    vClr = gl_Color;
}
//frag
uniform vec4 ClipPlane;
uniform sampler2D MatCap;
uniform float Brighten, SurfaceColor, Edge, PenWidth;
varying vec3 vN, vV;
varying vec4 vP, vClr;

vec3 desaturate(vec3 color, float amount) {
    vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));
    return vec3(mix(color, gray, amount));
}

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	vec3 n = normalize(vN);
	vec3 v = normalize(vV);
	float lightNormDot = abs(dot(n,v)); //with respect to viewer
	if (PenWidth < lightNormDot) discard;
	vec2 uv = n.xy * 0.5 + 0.5;
	vec3 clr = texture2D(MatCap,uv.xy).rgb;
	vec3 surf = mix(gl_FrontMaterial.ambient.rgb, vClr.rgb, vClr.a);
	surf = mix(vec3(0.67, 0.67, 0.67), surf, SurfaceColor); //0.67 as default Brighten is 1.5
	clr = clr * surf * Brighten;
	vec3 backclr = desaturate(clr, 0.75);
	//clr *= min((max(dot(n,normalize(v)), 0.0) - 0.5) * Edge, 0.0) + 1.0;
	clr *= min((lightNormDot - 0.5) * Edge, 0.0) + 1.0;
	float backface = step(0.0, n.z);
	gl_FragColor = vec4(mix(backclr.rgb, clr.rgb,  backface), 1.0);
}
