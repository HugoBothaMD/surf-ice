object ScriptForm: TScriptForm
  Tag = 2
  Left = 451
  Height = 380
  Top = 74
  Width = 420
  ActiveControl = Memo1
  Caption = 'ScriptForm'
  ClientHeight = 380
  ClientWidth = 420
  Menu = ScriptMenu1
  OnActivate = FormActivate
  OnCloseQuery = FormCloseQuery
  OnCreate = FormCreate
  OnDeactivate = FormDeactivate
  OnDropFiles = FormDropFiles
  OnHide = FormHide
  OnShow = FormShow
  LCLVersion = '1.9.0.0'
  object Splitter1: TSplitter
    Cursor = crVSplit
    Left = 0
    Height = 4
    Top = 268
    Width = 420
    Align = alBottom
    ResizeAnchor = akBottom
  end
  object Memo1: TMemo
    Left = 0
    Height = 268
    Top = 0
    Width = 420
    Align = alClient
    Constraints.MinHeight = 3
    OnChange = Memo1Change
    OnClick = Memo1Click
    OnDragDrop = Memo1DragDrop
    OnKeyUp = Memo1KeyUp
    ParentFont = False
    ScrollBars = ssAutoBoth
    TabOrder = 0
    WantTabs = True
    WordWrap = False
  end
  object Memo2: TMemo
    Left = 0
    Height = 108
    Top = 272
    Width = 420
    Align = alBottom
    Constraints.MinHeight = 3
    ParentFont = False
    ScrollBars = ssVertical
    TabOrder = 1
  end
  object ScriptMenu1: TMainMenu
    left = 104
    top = 32
    object AppleMenu: TMenuItem
      Caption = 'ï£¿'
      OnClick = AppleMenuClick
    end
    object File1: TMenuItem
      Caption = '&File'
      OnClick = File1Click
      object New1: TMenuItem
        Caption = '&New'
        OnClick = New1Click
      end
      object NewPython1: TMenuItem
        Tag = 1
        Caption = 'New Python'
        OnClick = New1Click
      end
      object Open1: TMenuItem
        Caption = '&Open...'
        OnClick = Open1Click
      end
      object Save1: TMenuItem
        Caption = '&Save'
        OnClick = Save1Click
      end
      object SaveAs1: TMenuItem
        Caption = 'Save &As...'
        OnClick = SaveAs1Click
      end
      object Exit1: TMenuItem
        Caption = 'E&xit'
        OnClick = Exit1Click
      end
      object N1: TMenuItem
        Caption = '-'
      end
      object MRU1: TMenuItem
        Caption = 'MRU1'
      end
      object MRU2: TMenuItem
        Caption = 'MRU2'
      end
      object MRU3: TMenuItem
        Caption = 'MRU3'
      end
      object MRU4: TMenuItem
        Caption = 'MRU4'
      end
      object MRU5: TMenuItem
        Caption = 'MRU5'
      end
      object MRU6: TMenuItem
        Caption = 'MRU6'
      end
      object MRU7: TMenuItem
        Caption = 'MRU7'
      end
      object MRU8: TMenuItem
        Caption = 'MRU8'
      end
      object MRU9: TMenuItem
        Caption = 'MRU9'
      end
      object MRU10: TMenuItem
        Caption = 'MRU10'
      end
    end
    object Edit1: TMenuItem
      Caption = 'Edit'
      object Cut1: TMenuItem
        Caption = 'Cut'
        ShortCut = 16472
        OnClick = Cut1Click
      end
      object Copy1: TMenuItem
        Caption = 'Copy'
        ShortCut = 16451
        OnClick = Copy1Click
      end
      object Paste1: TMenuItem
        Caption = 'Paste'
        ShortCut = 16470
        OnClick = Paste1Click
      end
      object ListCommands1: TMenuItem
        Caption = 'List all commands'
        OnClick = ListCommands1Click
      end
    end
    object Insert1: TMenuItem
      Caption = 'Insert'
      object MainImage1: TMenuItem
        Caption = 'Mesh'
        object meshload1: TMenuItem
          Tag = 4
          Caption = 'meshload'
          Hint = 'meshload (filename: string) Opens a mesh to view.'
          OnClick = InsertCommand
        end
        object meshcolor1: TMenuItem
          Tag = 36
          Caption = 'meshcolor'
          Hint = 'meshcolor (r, g, b: integer) Set red/green/blue components of main image.'
          OnClick = InsertCommand
        end
        object meshcurv1: TMenuItem
          Caption = 'meshcurv'
          Hint = 'meshcurv () Displays mesh curvature, so crevices appear dark.'
          OnClick = InsertCommand
        end
        object meshcreate1: TMenuItem
          Tag = 242322
          Caption = 'meshcreate'
          Hint = 'meshcreate (niiname, meshname: string; threshold, decimateFrac: float; minimumClusterVox, smoothStyle: integer) Convert a NIfTI voxel-based image into a mesh'
          OnClick = InsertCommand
        end
        object meshreversefaces1: TMenuItem
          Caption = 'meshreversefaces'
          Hint = 'meshreversefaces() reverse triangle winding to reverse front/back faces'
          OnClick = InsertCommand
        end
        object meshsave1: TMenuItem
          Tag = 4
          Caption = 'meshsave'
          Hint = 'meshsave (filename: string) Saves currently open mesh to disk.'
          OnClick = InsertCommand
        end
      end
      object Overlays1: TMenuItem
        Caption = 'Overlays'
        object overlayload1: TMenuItem
          Tag = 4
          Caption = 'overlayload'
          Hint = 'overlayload (filename: string) integer; Will add the overlay named filename and return the number of the overlay.'
          OnClick = InsertCommand
        end
        object overlayadditive1: TMenuItem
          Tag = 1
          Caption = 'overlayadditive'
          Hint = 'overlayadditive (add: boolean) Determines whether overlay colors are combined by adding or mixing the colors. For example, overlap of red and green overlays will appear yellow if additive is true'
          OnClick = InsertCommand
        end
        object overlaycloseall1: TMenuItem
          Caption = 'overlaycloseall'
          Hint = 'overlaycloseall () This function has no parameters. All open overlays will be closed.'
          OnClick = InsertCommand
        end
        object overlaycolorname1: TMenuItem
          Tag = 1214
          Caption = 'overlaycolorname'
          Hint = 'overlaycolorname (overlay: integer; filename: string) Set the colorscheme for the target overlay to a specified name.'
          OnClick = InsertCommand
        end
        object overlayminmax1: TMenuItem
          Tag = 1223
          Caption = 'overlayminmax'
          Hint = 'overlayminmax (overlay: integer; min, max: float) Sets the color range for the overlay.'
          OnClick = InsertCommand
        end
        object overlaytransparencyonbackground1: TMenuItem
          Tag = 2
          Caption = 'overlaytransparencyonbackground'
          Hint = 'overlaytransparencyonbackground (percent: integer) Controls the opacity of the overlays on the background.'
          OnClick = InsertCommand
        end
        object overlaycolorfromzero1: TMenuItem
          Tag = 1
          Caption = 'overlaycolorfromzero'
          Hint = 'overlaycolorfromzero (fromzero: boolean) If set to false, then the full color range is used to show the overlay.'
          Visible = False
          OnClick = InsertCommand
        end
        object overlayvisible1: TMenuItem
          Tag = 1211
          Caption = 'overlayvisible'
          Hint = 'overlayvisible (overlay: integer; visible: boolean) This feature allows you to make individual overlays visible or invisible.'
          OnClick = InsertCommand
        end
        object overlaytranslucent1: TMenuItem
          Tag = 1211
          Caption = 'overlaytranslucent'
          Hint = 'overlaytranslucent (overlay: integer; translucent: boolean) The feature allows you to make individual overlays translucent or opaque.'
          OnClick = InsertCommand
        end
        object overlayinvert1: TMenuItem
          Tag = 1211
          Caption = 'overlayinvert'
          Hint = 'overlayinvert (overlay: integer; invert: boolean) toggle whether overlay color scheme is inverted.'
          OnClick = InsertCommand
        end
        object overlaysmoothvoxelwisedata1: TMenuItem
          Tag = 1
          Caption = 'overlaysmoothvoxelwisedata'
          Hint = 'overlaysmoothvoxelwisedata (smooth: boolean) Determines if overlays are loaded using interpolation (smooth) or nearest neighbor (un-smoothed) interpolation.'
          OnClick = InsertCommand
        end
        object meshoverlayorder1: TMenuItem
          Tag = 1
          Caption = 'meshoverlayorder'
          Hint = 'meshoverlayorder (flip: boolean) If true, the mesh will be drawn after the overlay, and xray sliders will influence overlay not mesh.'
          OnClick = InsertCommand
        end
      end
      object Nodes1: TMenuItem
        Caption = 'Nodes'
        object edgeload1: TMenuItem
          Tag = 4
          Caption = 'edgeload'
          Hint = 'edgeload (filename: string) Loads a BrainNet Viewer format Edge file, e.g. connectome map'
          OnClick = InsertCommand
        end
        object edgecolor1: TMenuItem
          Tag = 1411
          Caption = 'edgecolor'
          Hint = 'edgecolor (name: string; varies: boolean) Select color scheme for connectome edge map'
          OnClick = InsertCommand
        end
        object edgecreate1: TMenuItem
          Tag = 1419
          Caption = 'edgecreate'
          Hint = 'edgecreate (filename: string; const mtx: array of single) Create a connectome edge map. For example, if you have 3 nodes, mtx should be an array with 9 values (3*3). For example, edgecreate('''',[1,2,3, 2,4,5, 3,5,6]) creates the links between 3 regions. Note the lower triangle and diagonal of this matrix is ignored.'
          OnClick = InsertCommand
        end
        object edgesize1: TMenuItem
          Tag = 1311
          Caption = 'edgesize'
          Hint = 'edgesize (size: float; varies: boolean) Set the diameters of the cylinders of the connectome.'
          OnClick = InsertCommand
        end
        object edgethresh1: TMenuItem
          Tag = 23
          Caption = 'edgethresh'
          Hint = 'edgethresh (lo, hi: float) Set minimum and maximum values for connectome edge diameters.'
          OnClick = InsertCommand
        end
        object nodeload1: TMenuItem
          Tag = 4
          Caption = 'nodeload'
          Hint = 'nodeload (filename: string) Loads BrainNet viewer format node file.'
          OnClick = InsertCommand
        end
        object nodecolor1: TMenuItem
          Tag = 1411
          Caption = 'nodecolor'
          Hint = 'nodecolor (name: string; varies: boolean) set colorscheme used for nodes.'
          OnClick = InsertCommand
        end
        object nodecreate1: TMenuItem
          Tag = 1459
          Caption = 'nodecreate'
          Hint = 'nodecreate (filename: string; const x, y, z, color, radius: array of single) Generates and displays a connectome hub map. The arrays x,y,z refer to the 3D spatial coordinates. The optional color and radius arrays allow you to specify the size. For example nodecreate(''mynode.node'',[0, 10, 8], [9, 0, 8], [0, 9, 0], [], []) creates three spheres with the default size and color. On the other hand, nodecreate(''mynode.node'',[0, 10, 8], [9, 0, 8], [0, 9, 0], [1, 2, 9], [5]) creates three spheres each with a unique color intensity and with a size of 5.'
          OnClick = InsertCommand
        end
        object nodehemisphere1: TMenuItem
          Tag = 2
          Caption = 'nodehemisphere'
          Hint = 'nodehemisphere (val: integer) Set -1 for left hemipshere, 0 for both, 1 for right'
          OnClick = InsertCommand
        end
        object ndepolarity1: TMenuItem
          Tag = 2
          Caption = 'nodepolarity'
          Hint = 'nodepolarity (val: integer) Set -1 for negative only, 0 for either, 1 for positive only.'
          OnClick = InsertCommand
        end
        object nodesize1: TMenuItem
          Tag = 1311
          Caption = 'nodesize'
          Hint = 'nodesize (size: float; varies: boolean) Determine size scaling factor for nodes.'
          OnClick = InsertCommand
        end
        object nodethresh1: TMenuItem
          Tag = 23
          Caption = 'nodethresh'
          Hint = 'nodethresh (lo, hi: float) Set the minimum and maximum range for nodes.'
          OnClick = InsertCommand
        end
        object nodethreshbysizenotcolor1: TMenuItem
          Tag = 1
          Caption = 'nodethreshbysizenotcolor'
          Hint = 'nodethreshbysizenotcolor (NodeThresholdBySize: boolean) If true then nodes will be hidden if they are smaller than the provided threshold. If false, they will be hidden if their color intensity is below the provided threshold.'
          OnClick = InsertCommand
        end
      end
      object Tracks1: TMenuItem
        Caption = 'Tracks'
        object trackload1: TMenuItem
          Tag = 4
          Caption = 'trackload'
          Hint = 'trackload (filename: string) Load fiber steam lines from a file.'
          OnClick = InsertCommand
        end
        object trackprefs1: TMenuItem
          Tag = 33
          Caption = 'trackprefs'
          Hint = 'trackprefs (length, width, dither: float) set the size and properties for streamlines'
          OnClick = InsertCommand
        end
      end
      object Atlas1: TMenuItem
        Caption = 'Atlas'
        object atlasgray1: TMenuItem
          Tag = 1218
          Caption = 'atlasgray'
          Hint = 'atlasgray (overlay: integer; const filt: array of integer) Gray atlas areas. For example atlasgray(0,[3,7]) will gray-out areas 3 and 7 of the background atlas. On the other hand, atlashide(1,[2,5]) will gray-out areas 2 and 5 of the first overlay image. For example atlashide(0,[3,7]) will gray the areas 3 and 7 of the background atlas. On the other hand, atlashide(1,[2,5]) will gray areas 2 and 5 of the first overlay image.'
          OnClick = InsertCommand
        end
        object atlashide1: TMenuItem
          Tag = 1218
          Caption = 'atlashide'
          Hint = 'atlashide (overlay: integer; const filt: array of integer) Hide atlas areas. For example atlashide(0,[3,7]) will hide the areas 3 and 7 of the background atlas. On the other hand, atlashide(1,[2,5]) will hide areas 2 and 5 of the first overlay image.'
          OnClick = InsertCommand
        end
        object atlasmaxindex1: TMenuItem
          Tag = 2
          Caption = 'atlasmaxindex'
          Hint = 'atlasmaxindex (overlay: integer): integer Reports maximum region humber in specified atlas. For example, if you load the CIT168 atlas (which has 15 regions) as your background image, then atlasmaxindex(0) will return 15.'
          OnClick = InsertCommand
        end
        object atlassaturationalpha1: TMenuItem
          Tag = 23
          Caption = 'atlassaturationalpha'
          Hint = 'atlassaturationalpha (saturation, transparency: float) Set saturation and transparency of atlas. A desaturated atlas will appear gray, a transparent atlas will reveal the background color.'
          OnClick = InsertCommand
        end
        object atlasstatmap1: TMenuItem
          Tag = 241819
          Caption = 'atlasstatmap'
          Hint = 'atlasstatmap (atlasname, statname: string; const indices: array of integer; const intensities: array of single) This creates a new mesh, where indexed regions are saved having the corresponding brightness from the array ''indices''. For example atlasstatmap(''jhu.mz3'','''',[1,3,9],[1.1, 4.4, 2.4]) creates a mesh where regions 1, 3, and 9 are given values 1.1, 4.4 and 2.4. If statname is provided, a mesh will be saved to disk, e.g. atlasstatmap(''jhu.mz3'',''out.mz3'',[1,3,9],[1.1, 4.4, 2.4]). nb this function is for creating maps, you can load them with loadmesh() and loadoverlay(). '
          OnClick = InsertCommand
        end
      end
      object Dialogs1: TMenuItem
        Caption = 'Dialogs'
        object modalmessage1: TMenuItem
          Tag = 4
          Caption = 'modalmessage'
          Hint = 'modalmessage (str: string) Shows a modal dialog, script stops until user presses ''OK'' button to dismiss dialog.'
          OnClick = InsertCommand
        end
        object modelessmessage1: TMenuItem
          Tag = 4
          Caption = 'modelessmessage'
          Hint = 'modelessmessage (str: string) Shows text in the bottom status region of the scripting window.'
          OnClick = InsertCommand
        end
      end
      object Shaders1: TMenuItem
        Caption = 'Shaders'
        OnClick = Shaders1Click
        object shaderadjust1: TMenuItem
          Tag = 1413
          Caption = 'shaderadjust'
          Hint = 'shaderadjust (property: string; value: float) Sets one of the user-adjustable properties.'
          OnClick = InsertCommand
        end
        object shaderambientocclusion1: TMenuItem
          Tag = 3
          Caption = 'shaderambientocclusion'
          Hint = 'shaderambientocclusion (amount: float) Specify a value in the range 0..1 to set the strength of the crevice shadows'
          OnClick = InsertCommand
        end
        object shadername1: TMenuItem
          Tag = 4
          Caption = 'shadername'
          Hint = 'shadername (Filename: string) Loads the requested shader.'
          OnClick = InsertCommand
        end
        object shaderlightazimuthelevation1: TMenuItem
          Tag = 22
          Caption = 'shaderlightazimuthelevation'
          Hint = 'shaderlightazimuthelevation (azimuth, elevation: integer) Changes location of light source.'
          OnClick = InsertCommand
        end
        object shaderxray1: TMenuItem
          Tag = 23
          Caption = 'shaderxray'
          Hint = 'shaderxray (object, overlay: float)  See occluded overlays/tracks/nodes by making either object transparent (0..1) or overlay/tracks/nodes emphasized (0..1)'
          OnClick = InsertCommand
        end
        object MenuItem1: TMenuItem
          Tag = 1
          Caption = 'shaderforbackgroundonly'
          Hint = 'shaderforbackgroundonly (onlybg: boolean) If true selected shader only influeces background image, otherwise shader influences background, overlays, tracks and nodes.'
          OnClick = InsertCommand
        end
      end
      object Render1: TMenuItem
        Caption = 'View'
        object azimuth1: TMenuItem
          Tag = 2
          Caption = 'azimuth'
          Hint = 'azimuth (degrees: integer) This command rotates the rendering.'
          OnClick = InsertCommand
        end
        object azimuthelevation1: TMenuItem
          Tag = 22
          Caption = 'azimuthelevation'
          Hint = 'azimuthelevation (azi, elev: integer) Sets the viewer location.'
          OnClick = InsertCommand
        end
        object backcolor1: TMenuItem
          Tag = 36
          Caption = 'backcolor'
          Hint = 'backcolor(r, g, b: integer) Changes the background color, for example backcolor(255, 0, 0) will set a bright red background'
          OnClick = InsertCommand
        end
        object cameradistance1: TMenuItem
          Tag = 3
          Caption = 'cameradistance'
          Hint = 'cameradistance (z: float) Sets the viewing distance from the object.'
          OnClick = InsertCommand
        end
        object camerapan1: TMenuItem
          Tag = 23
          Caption = 'camerapan'
          Hint = 'camerapan (x, y: float) Translate image horizontally (x) and vertically (y). range -1..+1, where 0 is centered. '
          OnClick = InsertCommand
        end
        object MenuItem2: TMenuItem
          Tag = 2
          Caption = 'colorbarposition'
          Hint = 'colorbarposition (pos: integer) Sets the position of the colorbar: 1=bottom, 2=left, 3=top, 4=right.'
          OnClick = InsertCommand
        end
        object colorbarvisible1: TMenuItem
          Tag = 1
          Caption = 'colorbarvisible'
          Hint = 'colorbarvisible (visible: boolean) Shows a colorbar on the main images.'
          OnClick = InsertCommand
        end
        object clip1: TMenuItem
          Tag = 3
          Caption = 'clip'
          Hint = 'clip (depth: float) Creates a clip plane that hides information close to the viewer.'
          OnClick = InsertCommand
        end
        object clipazimuthelevation1: TMenuItem
          Tag = 33
          Caption = 'clipazimuthelevation'
          Hint = 'clipazimuthelevation (depth, azi, elev: float) Set a view-point independent clip plane.'
          OnClick = InsertCommand
        end
        object elevation1: TMenuItem
          Tag = 2
          Caption = 'elevation'
          Hint = 'elevation (degrees: integer) Changes the render camera up or down.'
          OnClick = InsertCommand
        end
        object orientcubevisible1: TMenuItem
          Tag = 1
          Caption = 'orientcubevisible'
          Hint = 'orientcubevisible (visible: boolean) Show or hide cube that indicates object rotation'
          OnClick = InsertCommand
        end
        object viewaxial1: TMenuItem
          Tag = 1
          Caption = 'viewaxial'
          Hint = 'viewaxial (std: boolean) Creates rendering from an axial viewpoint.'
          OnClick = InsertCommand
        end
        object viewcoronal1: TMenuItem
          Tag = 1
          Caption = 'viewcoronal'
          Hint = 'viewcoronal (std: boolean) Creates rendering from a coronal viewpoint.'
          OnClick = InsertCommand
        end
        object viewsagittal1: TMenuItem
          Tag = 1
          Caption = 'viewsagittal'
          Hint = 'viewsagittal (std: boolean) creates rendering from an sagittal viewpoint.'
          OnClick = InsertCommand
        end
      end
      object Advanced1: TMenuItem
        Caption = 'Advanced'
        object bmpzoom1: TMenuItem
          Tag = 2
          Caption = 'bmpzoom'
          Hint = 'bmpzoom (z: integer) copy and save bitmaps at higher resolution than screen. bmpzoom(2) will save images at twice the resolution.'
          OnClick = InsertCommand
        end
        object exists1: TMenuItem
          Tag = 4
          Caption = 'exists'
          Hint = 'exists (filename: string): boolean Returns true if file exists on disk.'
          OnClick = InsertCommand
        end
        object fontname1: TMenuItem
          Tag = 4
          Caption = 'fontname'
          Hint = 'fontname (filename) Changes font used for colorbar. For example, "fontname(''''ubuntu'''')" will use the Ubuntu font.'
          OnClick = InsertCommand
        end
        object scriptformvisible1: TMenuItem
          Tag = 1
          Caption = 'scriptformvisible'
          Hint = 'scriptformvisible (visible: boolean) Shows/hides the scripting form.'
          OnClick = InsertCommand
        end
        object version1: TMenuItem
          Caption = 'version'
          Hint = 'version (): string Returns software version name.'
        end
        object quit1: TMenuItem
          Caption = 'quit'
          Hint = 'quit () Terminate application. Useful if another program is controlling this software'
          OnClick = InsertCommand
        end
      end
      object Close1: TMenuItem
        Caption = 'closeall'
        Hint = 'closeall () Closes all open meshes, overlays, nodes and tracks'
        Visible = False
        OnClick = InsertCommand
      end
      object resetdefaults1: TMenuItem
        Caption = 'resetdefaults'
        Hint = 'resetdefaults () Sets all of the user adjustable settings to their default values.'
        OnClick = InsertCommand
      end
      object savebmp1: TMenuItem
        Tag = 4
        Caption = 'savebmp'
        Hint = 'savebmp (filename: string) Saves the currently viewed image as a PNG format compressed bitmap image.'
        OnClick = InsertCommand
      end
      object wait1: TMenuItem
        Tag = 2
        Caption = 'wait'
        Hint = 'wait (msec: integer) The program pauses for the specified duration. For example WAIT(1000) delays the script for one second.'
        OnClick = InsertCommand
      end
    end
    object Toosl1: TMenuItem
      Caption = '&Script'
      object Compile1: TMenuItem
        Caption = 'Run'
        ShortCut = 16466
        OnClick = Compile1Click
      end
      object N2: TMenuItem
        Caption = '-'
      end
      object Stop1: TMenuItem
        Caption = 'Halt'
        ShortCut = 16456
        OnClick = Stop1Click
      end
    end
  end
  object OpenDialog1: TOpenDialog
    DefaultExt = '.gls'
    FileName = '*.gls'
    Filter = 'scripts (*.gls)|*.gls'
    Options = [ofHideReadOnly, ofNoChangeDir, ofPathMustExist, ofFileMustExist, ofDontAddToRecent]
    left = 40
    top = 104
  end
  object SaveDialog1: TSaveDialog
    DefaultExt = '.gls'
    FileName = '*.gls'
    Filter = 'scripts (*.gls)|*.gls'
    Options = [ofHideReadOnly, ofPathMustExist]
    left = 40
    top = 144
  end
  object PSScript1: TPSScript
    CompilerOptions = []
    OnCompile = PSScript1Compile
    Plugins = <>
    UsePreProcessor = False
    left = 39
    top = 64
  end
end
