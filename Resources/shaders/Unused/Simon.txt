//pref
RefractiveIndex|float|1|1.5|20
Roughness|float|0.01|0.1|1
GeometryStyle|int|0|2|3
DiffuseStyle|int|0|1|2
Distribution|bool|false
http://simonstechblog.blogspot.com/2011/12/microfacet-brdf.html|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    vClr = Clr;
}
//frag
#version 330
uniform float RefractiveIndex = 1.5;
uniform float Roughness = 0.1;
uniform bool Distribution;
uniform int GeometryStyle = 0;
uniform int DiffuseStyle = 1;
uniform vec4 ClipPlane;
in vec3 vN, vV, vL;
in vec4 vP, vClr;
out vec4 color;

float u_roughness = Roughness;
vec3 u_diffuseColor = vClr.rgb;
uniform vec3 u_lightColor = vec3(1.0, 1.0, 1.0);

float fresnel(float f0, vec3 n, vec3 l){
	return f0 + (1.0-f0) * pow(1.0- dot(n, l), 5.0);
}

float distributionBeckmann(vec3 n, vec3 h, float roughness){
	float m_Sq= roughness * roughness;
	float NdotH_Sq= max(dot(n, h), 0.0);
	NdotH_Sq= NdotH_Sq * NdotH_Sq;
	return exp( (NdotH_Sq - 1.0)/(m_Sq*NdotH_Sq) )/ (3.14159265 * m_Sq * NdotH_Sq * NdotH_Sq) ;
}

float distributionPhong(vec3 n, vec3 h, float roughness){
	float m= 2.0/(roughness*roughness) - 2.0;
	return (m+2.0) * pow( max(dot(n, h), 0.0), m) / (2.0 * 3.14159265);
}

float distribution(vec3 n, vec3 h, float roughness){
	if (Distribution)
		return distributionPhong(n, h, roughness);
	else
		return distributionBeckmann(n, h, roughness);
}

//float geometryImplicit(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
float geometryImplicit(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
	return max(dot(n, l), 0.0) * max(dot(n, v), 0.0);
}

float geometryCook(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
	float NdotH= dot(n, h);
	float NdotL= dot(n, l);
	float NdotV= dot(n, v);
	float VdotH= dot(v, h);
	float NdotL_clamped= max(NdotL, 0.0);
	float NdotV_clamped= max(NdotV, 0.0);
	return min( min( 2.0 * NdotH * NdotV_clamped / VdotH, 2.0 * NdotH * NdotL_clamped / VdotH), 1.0);
}

float geometrySchlick(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
	float NdotL_clamped= max(dot(n, l), 0.0);
	float NdotV_clamped= max(dot(n, v), 0.0);
	float k= roughness * sqrt(2.0/3.14159265);
	float one_minus_k= 1.0 -k;
	return ( NdotL_clamped / (NdotL_clamped * one_minus_k + k) ) * ( NdotV_clamped / (NdotV_clamped * one_minus_k + k) );
}

float geometryWalter(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
	float NdotV= dot(n, v);
	float NdotL= dot(n, l);
	float HdotV= dot(h, v);
	float HdotL= dot(h, l);
	float NdotV_clamped= max(NdotV, 0.0);
	float a= 1.0/ ( roughness * tan( acos(NdotV_clamped) ) );
	float a_Sq= a* a;
	float a_term;
	if (a<1.6)
		a_term= (3.535 * a + 2.181 * a_Sq)/(1.0 + 2.276 * a + 2.577 * a_Sq);
	else
		a_term= 1.0;
	return  ( step(0.0, HdotL/NdotL) * a_term  ) * ( step(0.0, HdotV/NdotV) * a_term  ) ;
}

float geometry(vec3 n, vec3 h, vec3 v, vec3 l, float roughness){
	if (GeometryStyle == 1)
		return geometryImplicit(n,h,v,l,roughness);
	else if (GeometryStyle == 2)
		return geometryCook(n,h,v,l,roughness);
	else if (GeometryStyle == 3)
		return geometrySchlick(n,h,v,l,roughness);
	else
		return geometryWalter(n,h,v,l,roughness);
}

float diffuseEnergyRatio1(float f0, vec3 n, vec3 l){
	return 1.0;
}

float diffuseEnergyRatioFresnel(float f0, vec3 n, vec3 l){
	return 1.0 - fresnel(f0, n, l);
}

float diffuseEnergyRatioFresnel0(float f0, vec3 n, vec3 l){
	return 1.0 - f0;
}

float diffuseEnergyRatio(float f0, vec3 n, vec3 l){
	if (DiffuseStyle == 1)
		return diffuseEnergyRatioFresnel0(f0, n, l);
	else if (DiffuseStyle == 2)
		return diffuseEnergyRatioFresnel(f0, n, l);
	else
		return diffuseEnergyRatio1(f0, n, l);
}

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	float u_fresnel0 = (1.0 - RefractiveIndex)/(1.0 + RefractiveIndex);
    u_fresnel0 = u_fresnel0 * u_fresnel0;
	vec3 light = normalize(vL);
	vec3 normal =  normalize(vN);
	vec3 view   = normalize(vV);
	vec3 halfVec=  normalize(light + view);
	float NdotL= dot(normal, light);
	float NdotV= dot(normal, view);
	float NdotL_clamped= max(NdotL, 0.0);
	float NdotV_clamped= max(NdotV, 0.0);
	float brdf_spec= fresnel(u_fresnel0, halfVec, light) * geometry(normal, halfVec, view, light, u_roughness) * distribution(normal, halfVec, u_roughness) / (4.0 * NdotL_clamped * NdotV_clamped);
	vec3 color_spec= NdotL_clamped * brdf_spec * u_lightColor;
	vec3 color_diff= NdotL_clamped * diffuseEnergyRatio(u_fresnel0, normal, light) * u_diffuseColor * u_lightColor;
	color = vec4( color_diff + color_spec, 1.0);
	float backface = step(0.00, normal.z);
	NdotL_clamped= max(-NdotL, 0.0);
	color_diff= NdotL_clamped * diffuseEnergyRatio(u_fresnel0, normal, light) * u_diffuseColor * u_lightColor;
	vec4 backcolor = vec4( color_diff * 0.7, 1.0);
	color = mix(backcolor, color,  backface);
}