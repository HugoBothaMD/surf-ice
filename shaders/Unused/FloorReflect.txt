//pref
Ambient|float|0.0|0.0|1.0
Diffuse|float|0.02|0.5|1.0
Specular|float|0.02|0.3|1.0
Gloss|float|0.02|0.35|1.0
FloorReflect|float|0.0|0.1|0.5
See https://gist.github.com/Danny02/6592732|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    vClr = Clr;
}
//frag
#version 330
in vec4 vClr, vP;
in vec3 vN, vL, vV;
out vec4 color;
uniform float Ambient = 0.3;
uniform float Diffuse = 0.5;
uniform float Specular = 0.5;
uniform float Gloss = 0.5;
uniform float FloorReflect = 0.2;
uniform vec4 ClipPlane = vec4(2.0, 0.0, 0.0, 0.0);

//const vec3 LIGHT_COLOR = vec3(1, 1.0, 1.0);

//created textures have to have realistic values
//Fresh asphalt  0.04
//Worn asphalt   0.12
//Bare soil      0.17
//Green grass    0.25
//Desert sand    0.40
//New concrete   0.55
//Fresh snow     0.80â€“0.90
vec3 directDiffuse = vec3(Diffuse);//normal diffuse color, from a texture i.e.

//the following values should be used:
//No value under 0.02
// gemstones 0.05-0.17
// liquids 0.02-0.04
//Skin      0.028
// when no idea set value of 0.04 (around plastic)
// for metals:
//Silver      0.971519    0.959915    0.915324
//Aluminium   0.913183    0.921494    0.924524
//Gold        1           0.765557    0.336057
//Copper      0.955008    0.637427    0.538163

//vec3 specColor = vec3(Spec);
const vec3 specColor = vec3(0.913183, 0.921494, 0.924524);


//how shiny things should be
//const float gloss = 0.9;

float SpecularPower = exp2(10 * Gloss + 1);
float normFactor = ((SpecularPower + 2) / 8 );

//about textures: directDiffuse, specColor or gloss can of course be read from textures or mixed with uniforms before they are used.
//remember when you want to use a diffuse texture that to have gamma correct colors to linearize the color after the texture read
// e.g. vec4 diff = toLinear(texture(sampler, uv))

vec4 toLinear(vec4 x) {
	return pow(x, vec4(2.2));
}

vec4 toGamma(vec4 x){
	return pow(x, vec4(1/2.2));
}

float saturate(float a) {
    return min(1,max(0,a));
}

#define OneOnLN2_x6 8.656170 // == 1/ln(2) * 6   (6 is SpecularPower of 5 + 1)
vec3 FresnelSchlick(vec3 E,vec3 H)
{
    return specColor + (1.0f - specColor) * exp2(-OneOnLN2_x6 * saturate(dot(E, H)));
}

float BlinnPhong(vec3 N, vec3 H)
{
    return pow(saturate(dot(N, H)), SpecularPower);
}

vec3 light(vec3 N, vec3 V, vec3 L, vec3 lightColor) {
    vec3 H = normalize(L+V);
    float NdotL = dot(N, L);

    vec3 directSpecular = FresnelSchlick(L, H) * BlinnPhong(N, H) * normFactor * Specular;
    return (directDiffuse + directSpecular) * lightColor * max(0.0,NdotL);
}

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
    vec3 N = normalize(vN);
    vec3 V = normalize(vV);
    vec3 L = normalize(vL);


    vec3 clr = light(N, V, L, vClr.rgb);
	vec3 L2 = normalize(vec3(0.0, -1.0, 0.0)); //reflected light from below
    //vec3 L2 = -L;
    //clr += (FloorReflect *  max(0.0, dot(N, L2))), vClr.rgb;
    clr += (FloorReflect *  max(0.0, dot(N, L2))) * vClr.rgb;
    clr += (Ambient * vClr.rgb);
    //color += ...  now add other lightsource or ambient light(directDiffuse * ambientLigthColor)
    color = toGamma(vec4(clr, 1));
}