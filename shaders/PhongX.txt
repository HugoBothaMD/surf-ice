//pref
Ambient|float|0|0.9|1
Diffuse|float|0|0.9|1
Specular|float|0|0.4|1
Material|int|0|0|23
Blinn-Phong shading. Adapted from Fluxus Library, Copyright 2007 Dave Griffiths, GPLv2. http://devernay.free.fr/cours/opengl/materials.html|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    vClr = Clr;
}
//frag
#version 330
uniform float Ambient, Diffuse, Specular;
uniform vec4 ClipPlane;
uniform int Material;
in vec3 vN, vV, vL;
in vec4 vP, vClr;
out vec4 color;

//http://openglut.sourceforge.net/teapots_8c.html
float ambR[24] = float[](0.0215, 0.135, 0.05375, 0.25, 0.1745, 0.1, 0.329412, 0.2125, 0.25, 0.19125, 0.24725, 0.19225, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0.05, 0.05, 0.05);
float ambG[24] = float[](0.1745, 0.2225, 0.05, 0.20725, 0.01175, 0.18725, 0.223529, 0.1275, 0.25, 0.0735, 0.1995, 0.19225, 0, 0.1, 0, 0, 0, 0, 0.02, 0.05, 0.05, 0, 0.05, 0.05);
float ambB[24] = float[](0.0215, 0.1575, 0.06625, 0.20725, 0.01175, 0.1745, 0.027451, 0.054, 0.25, 0.0225, 0.0745, 0.19225, 0, 0.06, 0, 0, 0, 0, 0.02, 0.05, 0, 0, 0.05, 0);
float difR[24] = float[](0.07568, 0.54, 0.18275, 1, 0.61424, 0.396, 0.780392, 0.714, 0.4, 0.7038, 0.75164, 0.50754, 0.01, 0, 0.1, 0.5, 0.55, 0.5, 0.01, 0.4, 0.4, 0.5, 0.5, 0.5);
float difG[24] = float[](0.61424, 0.89, 0.17, 0.829, 0.04136, 0.74151, 0.568627, 0.4284, 0.4, 0.27048, 0.60648, 0.50754, 0.01, 0.50980392, 0.35, 0, 0.55, 0.5, 0.01, 0.5, 0.5, 0.4, 0.5, 0.5);
float difB[24] = float[](0.07568, 0.63, 0.22525, 0.829, 0.04136, 0.69102, 0.113725, 0.18144, 0.4, 0.0828, 0.22648, 0.50754, 0.01, 0.50980392, 0.1, 0, 0.55, 0, 0.01, 0.5, 0.4, 0.4, 0.5, 0.4);
float specR[24] = float[](0.633, 0.316228, 0.332741, 0.296648, 0.727811, 0.297254, 0.992157, 0.393548, 0.774597, 0.256777, 0.628281, 0.508273, 0.5, 0.50196078, 0.45, 0.7, 0.7, 0.6, 0.4, 0.04, 0.04, 0.7, 0.7, 0.7);
float specG[24] = float[](0.727811, 0.316228, 0.328634, 0.296648, 0.626959, 0.30829, 0.941176, 0.271906, 0.774597, 0.137622, 0.555802, 0.508273, 0.5, 0.50196078, 0.55, 0.6, 0.7, 0.6, 0.4, 0.7, 0.7, 0.04, 0.7, 0.7);
float specB[24] = float[](0.633, 0.316228, 0.346435, 0.296648, 0.626959, 0.306678, 0.807843, 0.166721, 0.774597, 0.086014, 0.366065, 0.508273, 0.5, 0.50196078, 0.45, 0.6, 0.7, 0.5, 0.4, 0.7, 0.04, 0.04, 0.7, 0.04);
float shiny[24] = float[](0.6, 0.1, 0.3, 0.088, 0.6, 0.1, 0.21794872, 0.2, 0.6, 0.1, 0.4, 0.4, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.078125, 0.078125, 0.078125, 0.078125, 0.078125, 0.078125);

void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	vec3 l = normalize(vL);
	vec3 n = normalize(vN);
	vec3 v = normalize(vV);
	vec3 h = normalize(l+v);
	vec3 a = vec3(ambR[Material], ambG[Material], ambB[Material]) * Ambient;
	vec3 d = vec3(difR[Material], difG[Material], difB[Material]) * Diffuse;
	float backface = 1.0 - step(0.0, n.z); //1=backface
	vec3 dback = d * max(dot( l, -n), 0.0);
	d *= max(dot( l, n), 0.0);
	vec3 s = vec3(specR[Material], specG[Material], specB[Material]) * pow(max(0.0, dot(n, h)), 128.0 * shiny[Material]) * Specular;
	//pow(max(0.0, dot(surfaceNormal, H)), shininess);
	color = vec4(mix(a + d + s,a + dback,   backface), 1.0);
}
// Copyright (C) 2007 Dave Griffiths
// Fluxus Shader Library
// ---------------------
// Glossy Specular Reflection Shader
// A more controllable version of blinn shading,
// Useful for ceramic or fluids - from Advanced
// Renderman, thanks to Larry Gritz
// http://www.pawfal.org/fluxus/
// https://github.com/danomatika/fluxus/blob/master/LICENCE