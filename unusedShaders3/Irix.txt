//pref
Ambient|float|0.0|0.3|1
Diffuse|float|0.0|0.7|1
Specular|float|0.0|0.2|1
Shininess|float|1|60|120
Iridescence|float|0|0.025|0.2
Blinn-Phong shading with Lambertian diffuse. Copyright 2015 Chris Rorden, BSD2clause.|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
out vec3 vN, vL, vV;
out vec4 vClr, vP;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0); //LR, -DU+, -FN+
void main() {
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
    vClr = Clr;
}
//frag
#version 330
in vec4 vClr, vP;
in vec3 vN, vL, vV;
out vec4 color;
uniform float Ambient = 0.5;
uniform float Diffuse = 0.7;
uniform float Specular = 0.2;
uniform float Shininess = 60.0;
uniform float Iridescence = 1.0;
uniform vec4 ClipPlane = vec4(2.0, 0.0, 0.0, 0.0);

float setRange(float value, float oMin, float oMax, float iMin, float iMax){
	return iMin + ((value - oMin)/(oMax - oMin)) * (iMax - iMin);
}

float diNoise(vec3 pos){
	//noise function to create irregularity
	float mult = 1;
	float oset = 45;		//offset
	return	sin(pos.x*mult*2 + 12 + oset) + cos(pos.z*mult + 21 + oset) *
		sin(pos.y*mult*2 + 23 + oset) + cos(pos.y*mult + 32 + oset) *
		sin(pos.z*mult*2 + 34 + oset) + cos(pos.x*mult + 43 + oset);
}

vec3 iridescence(float orient, vec3 P){
	//this function returns a iridescence value based on orientation
	vec3 irid;
	float freq = 10;
	float oset = 25;		//offset
	float noiseMult = 1;
	irid.x = abs(cos(orient*freq + diNoise(P)*noiseMult + 1 + oset));
	irid.y = abs(cos(orient*freq + diNoise(P)*noiseMult + 2 + oset));
	irid.z = abs(cos(orient*freq + diNoise(P)*noiseMult + 3 + oset));
	return irid;
}


void main() {
	if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
	vec3 l = normalize(vL);
	vec3 n = normalize(vN);
	vec3 v = normalize(vV);
	vec3 h = normalize(l+v);
	vec3 a = vClr.rgb;
	vec3 backcolor = Ambient*vec3(0.1+0.1+0.1) + a*abs(dot(n,l))*Diffuse;
	vec3 d = a * dot(n,l) * Diffuse;
	a *= Ambient;
	float s = pow(max(0.0,dot(n,h)), Shininess) * Specular;
	float backface = step(0.00, n.z);
	color = vec4(mix(backcolor.rgb, a + d + s,  backface), 1.0);

	vec3 p = normalize(vP.xyz);
	float fr = dot(n, -v);
	vec4 iridColor = vec4(iridescence(fr, p), 1.0) * setRange(pow(1 - fr, 1/0.75), 0, 1, 0.1, 1);
	iridColor.rgb *= Iridescence;
	color.rgb += iridColor.rgb;

}