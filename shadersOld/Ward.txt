//pref
Ambient|float|0.0|0.3|1
Diffuse|float|0.0|0.9|2
Specular|float|0.0|0.5|2
DiffuseRough|float|0.0|1.5|5
SpecularRough|float|0.0|0.1|0.5
Fresnel|float|0.1|0.5|1
OutlineWidth|float|0.0|0.0|0.25
Minnaert diffuse lighting with Ward anisotropic specular highlights, Copyright 2007, Sancho Pereira, GPL2 License|note
//vert
//uniform vec3 LightPos;
varying vec3 vN, vL, vV;
varying vec4 vP, vClr;
void main()
{
    vN = gl_NormalMatrix * gl_Normal;
    vL = (gl_LightSource[0].position).xyz;
    vV = -vec3(gl_ModelViewMatrix*gl_Vertex);
    vP = gl_Vertex;
    gl_Position = ftransform();
    vClr = gl_Color;
}
//frag
varying vec4 vClr, vP;
varying vec3 vN, vL, vV;
uniform float Ambient, Diffuse, Specular, DiffuseRough, SpecularRough, Fresnel, OutlineWidth;
uniform vec4 ClipPlane;
//uniform vec3 LightPos; //LR, -DU+, -FN+

// Minnaert limb darkening diffuse term
float minnaert( vec3 L, vec3 Nf, float k) {
	float ndotl = max( 0.0, dot(L, Nf));
	return pow( ndotl, k);
}

// Ward isotropic specular term
float wardiso( vec3 Nf, vec3 Ln, vec3 Hn, float roughness, float ndotv ) {
	float ndoth = dot( Nf, Hn);
	float ndotl = dot( Nf, Ln);
	float tandelta = tan( acos(ndoth));
	return  exp( -( pow( tandelta, 2.0) / pow( roughness, 2.0)))
		* (1.0 / sqrt( ndotl * ndotv ))
		* (1.0 / (4.0 * pow( roughness, 2.0)));
	}

float schlick( vec3 Nf, vec3 Vf, float ior, float ndotv ) {
	float kr = (ior-1.0)/(ior+1.0);
	kr *= kr;
	return kr + (1.0-kr)*pow( 1.0 - ndotv, 5.0);
}

vec3 desaturate(vec3 color, float amount) {
    vec3 gray = vec3(dot(vec3(0.2126,0.7152,0.0722), color));
    return vec3(mix(color, gray, amount));
}

void main() {
 if ((ClipPlane[0] < 1.5) && (dot( ClipPlane, vP) > 0.0)) discard;
   vec3 viewDirection = normalize(vV);
  vec3 lightDirection = normalize(vL - vP.xyz);
  //Surface properties
  vec3 n = normalize(vN);
  vec3 l = normalize(vL);
  vec3 a = gl_FrontMaterial.ambient.rgb;
  a = mix(a.rgb, vClr.rgb, vClr.a);
  vec3 d = a * Diffuse;
  a *= Ambient;
  if (n.z < 0.0) { //i.e. if (!gl_FrontFacing)
    gl_FragColor = vec4(desaturate(0.75 * a + 0.75 * d * abs(dot(l,n)), 0.5),1.0);
    return;
  }
  d = d * minnaert( l, n, DiffuseRough);
  vec3 v = normalize(vV);
  float ndotv = dot(n, v);
  vec3 h = normalize(l+v);
  float fresnel = schlick(n, v, Fresnel, ndotv);
  float specular = wardiso(n, l, h, SpecularRough, ndotv) * fresnel * Specular;
  specular = max(specular, 0.0);
  if ((OutlineWidth > 0.0) && (ndotv < OutlineWidth))
  	specular = -(1.0 - smoothstep(0.0, OutlineWidth, ndotv));
  vec3 SpecularColor = vec3(1.0, 1.0, 1.0);
  gl_FragColor = vec4( a + d + SpecularColor * specular, 1.0);
}
//https://code.google.com/p/qshaderedit/source/browse/qshaderedit/shaders/sancho/minnaertward.glsl?spec=svn165&r=165
// Copyright 2007 Sancho Pereira
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.